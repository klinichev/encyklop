---
import { Picture } from 'astro:assets';
import type { ImageMetadata } from 'astro';

interface Props {
	src: string;
	alt?: string;
	width?: string | number;
	margin?: string;
	showalt?: boolean;
	sourceUrl?: string;
	sourceTitle?: string;
	framed?: boolean;
}

const {
	src,
	alt = '',
	width = '760px',
	margin,
	showalt = false,
	sourceUrl,
	sourceTitle,
	framed = false,
} = Astro.props;

const widthWithUnit = typeof width === "number" ? `${width}px` : width;

// Use glob import to get all images
const images = import.meta.glob<{ default: ImageMetadata }>("/public/images/**/*");

// If src is a string and starts with "/images", try to find it in the glob
const imageSrc =
	typeof src === "string" && src.startsWith("/images")
		? (await images["/public" + src]()).default
		: src;

// Modified GIF detection logic
const isGif = typeof src === "string" && src.toLowerCase().endsWith(".gif");

const source = sourceTitle ? `"${sourceTitle}"` : 'none';
---

<figure class:list={["container", { framed }]} style={`margin: ${margin || ""}`}>
	<div
		class="image-wrapper"
		style={`max-width: ${widthWithUnit}; --source: ${source}`}
	>
		{
			isGif ? (
				<img
					src={typeof imageSrc === "string" ? src : imageSrc.src}
					alt={alt}
					class="styled-image"
					loading="lazy"
				/>
			) : (
				<Picture
					src={imageSrc as ImageMetadata}
					alt={alt}
					width={typeof width === "number" ? width : parseInt(width)}
					class="styled-image"
					loading="lazy"
					decoding="async"
					densities={[2]}
					quality="max"
				/>
			)
		}
	</div>
	{
		showalt &&
			(sourceUrl ? (
				<figcaption>
					<em>{alt} – Источник: <a href={sourceUrl}>{sourceTitle}</a></em>
				</figcaption>
			) : (
                <em><figcaption>{alt}</figcaption></em>
			))
	}
</figure>

<style>
	.container {
        margin-bottom: 2em;
		text-align: center;
	}

	.image-wrapper {
		display: flex;
		justify-content: center;
		position: relative;
		width: 100%;
		margin: 0 auto;
		height: auto;
	}

	.image-wrapper::after {
		position: absolute;
		display: block;
		content: var(--source);
		right: 0;
		bottom: 0;
		z-index: 2;
		padding: 6px;
		border-bottom-right-radius: 8px;
		font-size: 12px;
		font-weight: 600;
		background-color: rgba(var(--gray-dark), 50%);
		color: #fff;
	}

    .image-frame {
        border: 1px solid #e6e3e1;
		border-radius: 8px;
		contain: content;
	}

	.styled-image {
		height: auto;
		width: 100%;
		max-width: 100%;
		margin: 0 auto;
		position: relative;
		z-index: 1;
		object-fit: contain;
		display: block;
	}

	figcaption {
		font-size: 0.95em;
		line-height: 1.5;
		width: 100%;
		max-width: 800px;
		margin: 1rem auto 0;
        padding: 0 16px;
	}
</style>